// Code generated by "stringer -type TcpEvent,TcpState,TcpAction -output tcp_string.go tcp.go"; DO NOT EDIT

package swp

import "fmt"

const _TcpEvent_name = "EventNilEventStartListenEventStartConnectEventSynEventSynAckEventEstabAckEventStartCloseEventApplicationClosedEventFinEventFinAckEventDataAckEventDataEventKeepAlive"

var _TcpEvent_index = [...]uint8{0, 8, 24, 41, 49, 60, 73, 88, 110, 118, 129, 141, 150, 164}

func (i TcpEvent) String() string {
	if i < 0 || i >= TcpEvent(len(_TcpEvent_index)-1) {
		return fmt.Sprintf("TcpEvent(%d)", i)
	}
	return _TcpEvent_name[_TcpEvent_index[i]:_TcpEvent_index[i+1]]
}

const _TcpState_name = "FreshClosedListenSynReceivedSynSentEstablishedCloseInitiatorHasSentFinCloseResponderGotFin"

var _TcpState_index = [...]uint8{0, 5, 11, 17, 28, 35, 46, 70, 90}

func (i TcpState) String() string {
	if i < 0 || i >= TcpState(len(_TcpState_index)-1) {
		return fmt.Sprintf("TcpState(%d)", i)
	}
	return _TcpState_name[_TcpState_index[i]:_TcpState_index[i+1]]
}

const _TcpAction_name = "NoActionSendSynSendSynAckSendEstabAckSendFinSendFinAckDoAppCloseSendDataAck"

var _TcpAction_index = [...]uint8{0, 8, 15, 25, 37, 44, 54, 64, 75}

func (i TcpAction) String() string {
	if i < 0 || i >= TcpAction(len(_TcpAction_index)-1) {
		return fmt.Sprintf("TcpAction(%d)", i)
	}
	return _TcpAction_name[_TcpAction_index[i]:_TcpAction_index[i+1]]
}
