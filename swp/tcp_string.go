// Code generated by "stringer -type TcpEvent,TcpState,TcpAction -output tcp_string.go tcp.go"; DO NOT EDIT

package swp

import "fmt"

const (
	_TcpEvent_name_0 = "EventStartListenEventStartConnectEventSynEventSynAckEventEstabAckEventStartCloseEventApplicationClosedEventFinEventFinAckEventResetEventDataAckEventData"
	_TcpEvent_name_1 = "EventKeepAlive"
)

var (
	_TcpEvent_index_0 = [...]uint8{0, 16, 33, 41, 52, 65, 80, 102, 110, 121, 131, 143, 152}
	_TcpEvent_index_1 = [...]uint8{0, 14}
)

func (i TcpEvent) String() string {
	switch {
	case 1 <= i && i <= 12:
		i -= 1
		return _TcpEvent_name_0[_TcpEvent_index_0[i]:_TcpEvent_index_0[i+1]]
	case i == 14:
		return _TcpEvent_name_1
	default:
		return fmt.Sprintf("TcpEvent(%d)", i)
	}
}

const _TcpState_name = "ClosedListenSynReceivedSynSentEstablishedFinWait1FinWait2ClosingCloseWaitLastAck"

var _TcpState_index = [...]uint8{0, 6, 12, 23, 30, 41, 49, 57, 64, 73, 80}

func (i TcpState) String() string {
	if i < 0 || i >= TcpState(len(_TcpState_index)-1) {
		return fmt.Sprintf("TcpState(%d)", i)
	}
	return _TcpState_name[_TcpState_index[i]:_TcpState_index[i+1]]
}

const _TcpAction_name = "NoActionSendSynSendSynAckSendEstabAckSendFinSendFinAckDoAppCloseSendDataAck"

var _TcpAction_index = [...]uint8{0, 8, 15, 25, 37, 44, 54, 64, 75}

func (i TcpAction) String() string {
	if i < 0 || i >= TcpAction(len(_TcpAction_index)-1) {
		return fmt.Sprintf("TcpAction(%d)", i)
	}
	return _TcpAction_name[_TcpAction_index[i]:_TcpAction_index[i+1]]
}
