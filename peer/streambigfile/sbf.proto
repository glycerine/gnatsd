syntax = "proto3";
package streambigfile;

message BigFileChunk {
    // Filepath is just an arbitrary
    // name for this file.
    string    Filepath    = 1;

    // SizeInBytes should match
    // len(Data) exactly.
    int64     SizeInBytes = 2;

    // According to the sender's clock,
    // when did this chunk get put
    // on the wire?
    fixed64   SendTime    = 3;

    // Blake2B checksum of Data.
    bytes     Blake2B     = 4;
    
    // Cumulative Blake2B of all
    // Chunks of the file, up to
    // and including this one.
    bytes     Blake2BCumulative = 5;

    // How big can Data be? I
    // recommend no more than 1MB.
    // I suggest 1MB chunking to be
    // on the safe side. Above
    // 2MB, I observe that gRPC
    // starts to return EOF instead
    // of conveying the messages.
    // 
    // Fields Data and Blake2B are
    // for just a single chunk.
    bytes     Data        = 6;

    // gRPC guarantees in-order delivery
    // of the stream, so ChunkNumber may
    // seem unnecessary. It is still
    // useful for/as a delivery progress
    // meter.
    int64     ChunkNumber      = 7;

    // Be sure to set IsLastChunk to true
    // if this is the last chunk.
    bool      IsLastChunk = 8;

    // IsBcastSetRequest? (else by default it is a BcastGetReply)
    bool      IsBcastSet = 9;
}

message BigFileAck {
    string    Filepath         = 1;
    int64     SizeInBytes      = 2;
    fixed64   RecvTime         = 3;
    bytes     WholeFileBlake2B = 4;
    string    Err              = 5;
}

service Peer {
    rpc SendFile(stream BigFileChunk) returns (BigFileAck) {}
}
